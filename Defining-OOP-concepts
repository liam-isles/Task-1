Encapsulation - it has a few functions as a concept. It can be used to surround data variables and methods, allowing them to be brought together into one form. using encapsulation hides the class variables from other classes, only allowing access through their current class methods. this is largely achieved through the use of public and private when declaring the variables of a class, public allowing access and private not. for example, public class potato would allow access from other class variables, whereas private class potato would not. this not only allows class fields to become read or write-only, it allows a better form of control over what can be stored within a class. 
Inheritance - this mainly allows us to reuse code and maintain it more efficiently. as the name suggests inheritance allows you to inherit behaviour from another class. so, as an example, if you have a class of vegetables, you could create a new potato class that uses the keyword extends to inherit behaviour defined in the original vegetables class. similarly, methods defined within the initial class can be used on objects within the potato class such as the size or colour of the potato.
Polymorphism - The basic concept is the ability of an object to make many forms under the name of the original object. Typically in OOP we see this when a parent class reference is used in referring to a child class object. consider the following example:
public interface Edible {};
public class Vegetable {};
public class Potato extends Vegetable implements Edible {};
in this case, the Potato class is polymorphic, it has inherited the values of the previous classes and now has multiple values within it. Polymorphism can also be used when overriding classes.
Abstraction - Similar to encapsulation in regard to controlling and deciding what accesses data and how it does it within a class. essentially it allows the user of a program to only see the functionality and not every piece of code that has gone into allowing the program to function. Abstraction practically works via Abstract classes, methods and interfaces. For Abstract classes, any class containing the abstract keyword will be an abstract class, e.g. public abstract class potato. this does have rules, however. if there is a single abstract method within a class, the whole class must be declared abstract. You must inherit an abstract class from another class and provide implementations to the abstract methods for it to function. You can also create abstract methods that allow a method to be created in a parent class but then have the implementation determined via a child class. this also uses the abstract keyword and ends the methods with a semi colon instead of brackets.  
